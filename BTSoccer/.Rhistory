}
} else if (data1$U[kamp] == UnikHold[hold]) {
if (data1$HM[kamp] <= data1$UM[kamp]){
StreakSum = StreakSum + 1
} else {
StreakSum = 0
}
}
}
streak[hold] = StreakSum
}
GnsMal <- c(aggregate(data1$HM, by = list(H = data1$H),FUN = mean)[,2]+aggregate(data1$UM, by = list(U = data1$U),FUN = mean)[,2])/2
GnsMalInd <- c(aggregate(data1$UM, by = list(H = data1$H),FUN = mean)[,2]+aggregate(data1$HM, by = list(U = data1$U),FUN = mean)[,2])/2
GnsTilskuer <- c(aggregate(data1$Tilskuere, by = list(H = data1$H),FUN = mean)[,2]+aggregate(data1$Tilskuere, by = list(U = data1$U),FUN = mean)[,2])/1000
GnsBoldBes <- c(aggregate(dataUNan$boldb_h, by = list(H = dataUNan$H),FUN = mean)[,2]+aggregate(dataUNan$boldb_u, by = list(U = dataUNan$U),FUN = mean)[,2])
GnsSkud <- c(aggregate(dataUNan$skud_h, by = list(H = dataUNan$H),FUN = mean)[,2]+aggregate(dataUNan$skud_u, by = list(U = dataUNan$U),FUN = mean)[,2])/2
GnsSkudIndenfor <- c(aggregate(dataUNan$skud_inderfor_h, by = list(H = dataUNan$H),FUN = mean)[,2]+aggregate(dataUNan$skud_inderfor_u, by = list(U = dataUNan$U),FUN = mean)[,2])/2
GnsFrispark <- c(aggregate(dataUNan$frispark_h, by = list(H = dataUNan$H),FUN = mean)[,2]+aggregate(dataUNan$frispark_u, by = list(U = dataUNan$U),FUN = mean)[,2])/2
GnsHjorne <- c(aggregate(dataUNan$hjorne_h, by = list(H = dataUNan$H),FUN = mean)[,2]+aggregate(dataUNan$hjorne_u, by = list(U = dataUNan$U),FUN = mean)[,2])/2
#TeamRatings <- c(67,63,66,67,66,72,69,66,64,63,66,64,65,62,64,64)
#TeamRatings <- c(66,63,65,68,64,71,70,66,63,67,64,64,64,64)-63
x <- as.data.frame.matrix(rbind(streak,GnsHjorne,GnsMal,GnsMalInd,GnsTilskuer,GnsBoldBes,GnsSkud,GnsSkudIndenfor,GnsFrispark))
#x <- as.matrix(rbind(GnsMal,GnsBoldBes,GnsSkud))
#Danner Antal-kampe-vektoren (r)
r <- xtabs(data1$Hsejr+data1$Usejr+data1$Uafgjort~H+U,data1)
r <- as.data.frame.matrix(r)
r <- r+t(r)
Matrixes <- list("DesignMatrix" = x,"KontingensTabel" = Y,"SamledeKampe" = r)
return(Matrixes)
}
)
#Danner ikke-tab-streak
for (hold in 1:length(UnikHold)){
StreakSum = 0
for (kamp in 1:length(data1[,1])) {
if (data1$H[kamp] == UnikHold[hold]) {
if (data1$HM[kamp] >= data1$UM[kamp]){
StreakSum = StreakSum + 1
} else {
StreakSum = 0
}
} else if (data1$U[kamp] == UnikHold[hold]) {
if (data1$HM[kamp] <= data1$UM[kamp]){
StreakSum = StreakSum + 1
} else {
StreakSum = 0
}
}
}
streak[hold] = StreakSum
}
#fikser datatypes
data$H <- as.character(data$H)
data$U <- as.character(data$U)
data$dato <- as.Date(data$dato, format = "%m/%d/%Y")
#Henter 1.5 sæson ud:
data1 <- data[which((data$dato>=StartDate) & (data$dato <= EndDate)),]
install.packages("Rtools")
library(BTSoccer)
#git add Probabilities.R #git commit -m "Navn på ændring" #git push #git pull
rm(list=ls())
?CreateMatrixes
library(BTSoccer)
wd
print(wd)
?setwd
getwd
getwd()
NR
library(BTSoccer)
setwd("C:/Users/lucas/Desktop/Odd")
#Henter og verificerer data
data <- read.table("kampe_r1.csv",header=T,sep=",")
?CreateMatrixes
m <- CreateMatrixes(data,"2019-01-01","2019-12-12",0)
library(matlib) #Til vektor/matrix regning
library(blockmatrix) #matrixopsætning
library(tidyr) #Til data transformation
m <- CreateMatrixes(data,"2019-01-01","2019-12-12",0)
x <- m$DesignMatrix;Y <- m$KontingensTabel; r <- m$SamledeKampe;
f <- BTFunktioner(beta,theta,x)
?NR
n <- NR(x,f)
data <- read.table("kampe_r1.csv",header=T,sep=",")
f$loglike(beta,theta,x)
#iterationsvektoren:
#Y = Y*100;r = r*100;
#Y = Y/100;r = r/100;
ite = as.matrix(c(rep(0,dim(x)[1]),1.1));counter=0;val=1;
beta = c(ite[1:(dim(x)[1])]);
theta=ite[dim(x)[1]+1];
f$loglike(beta,theta,x)
f$dlbeta(beta,theta,x)
f$dltheta(beta,theta,x)
f$dl2xtheta(beta,theta,x)
x
f$dltheta(beta,theta,x)
f$dl2xtheta(beta,theta,x)
f$dl2xbeta(beta,theta,x)
f$dlbetatheta(beta,theta,x)
dtheta <- function(beta,theta,x) {
for(i in 1:(dim(x)[2]-1)) {
for(j in (i+1):dim(x)[2]) {
sum = sum + ((r[i,j]-Y[i,j]-Y[j,i])*(2*theta/(theta^2-1))
+ (r[i,j]-Y[i,j])*(-(exp(t(x[,i])%*%beta)/(theta*exp(t(x[,i])%*%beta)+exp(t(x[,j])%*%beta))))
+ (r[i,j]-Y[j,i])*(-(exp(t(x[,j])%*%beta)/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta))))
)
}
}
return(sum)
}
dtheta(beta,theta,x)
dtheta <- function(beta,theta,x) {
for(i in 1:(dim(x)[2]-1)) {
sum = 0;
for(j in (i+1):dim(x)[2]) {
sum = sum + ((r[i,j]-Y[i,j]-Y[j,i])*(2*theta/(theta^2-1))
+ (r[i,j]-Y[i,j])*(-(exp(t(x[,i])%*%beta)/(theta*exp(t(x[,i])%*%beta)+exp(t(x[,j])%*%beta))))
+ (r[i,j]-Y[j,i])*(-(exp(t(x[,j])%*%beta)/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta))))
)
}
}
return(sum)
}
dtheta(beta,theta,x)
dtheta2 <- function(beta,theta,x) {
for(i in 1:(dim(x)[2]-1)) {
for(j in (i+1):dim(x)[2]) {
sum = 0;
sum = sum + ((r[i,j]-Y[i,j]-Y[j,i])*(-(2*(theta^2+1))/(theta^2-1)^2)
+(r[i,j]-Y[i,j])*(exp(2*t(x[,i])%*%beta)/(theta*exp(t(x[,i])%*%beta)+exp(t(x[,j])%*%beta))^2)
+(r[i,j]-Y[j,i])*(exp(2*t(x[,j])%*%beta)/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta))^2)
)
}
}
return(sum)
}
BTFunktioner <- function(beta,theta,x) {
logl <- function(beta,theta,x){
sum=0;
for (i in 1:(dim(x)[2]-1)){
for (j in (i+1):(dim(x)[2])){
sum = sum +Y[i,j]*(t(x[,i])%*%beta-log(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta)))+
Y[j,i]*(t(x[,j])%*%beta-log(exp(t(x[,j])%*%beta)+theta*exp(t(x[,i])%*%beta)))+
(r[i,j]-Y[i,j]-Y[j,i])*(log(theta^2-1)+t(x[,i])%*%beta+t(x[,j])%*%beta-log(exp(t(x[,i])%*%beta)+
theta*exp(t(x[,j])%*%beta))-log(exp(t(x[,j])%*%beta)+theta*exp(t(x[,i])%*%beta)))
}
}
return(sum)
}
db <- function(beta,theta,x){
sum=0;
for(i in 1:(dim(x)[2]-1)){
for(j in (i+1):dim(x)[2]) {
sum = sum + (c(r[i,j]-Y[i,j])*(-(theta*exp(t(x[,i])%*%beta))/(exp(t(x[,j])%*%beta)+theta*exp(t(x[,i])%*%beta)))
+c(r[i,j]-Y[j,i])*((theta*exp(t(x[,j])%*%beta))/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta)))
)*(x[,i]-x[,j])
}
}
return(sum)
}
dtheta <- function(beta,theta,x) {
for(i in 1:(dim(x)[2]-1)) {
sum = 0;
for(j in (i+1):dim(x)[2]) {
sum = sum + ((r[i,j]-Y[i,j]-Y[j,i])*(2*theta/(theta^2-1))
+ (r[i,j]-Y[i,j])*(-(exp(t(x[,i])%*%beta)/(theta*exp(t(x[,i])%*%beta)+exp(t(x[,j])%*%beta))))
+ (r[i,j]-Y[j,i])*(-(exp(t(x[,j])%*%beta)/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta))))
)
}
}
return(sum)
}
dtheta2 <- function(beta,theta,x) {
for(i in 1:(dim(x)[2]-1)) {
for(j in (i+1):dim(x)[2]) {
sum = 0;
sum = sum + ((r[i,j]-Y[i,j]-Y[j,i])*(-(2*(theta^2+1))/(theta^2-1)^2)
+(r[i,j]-Y[i,j])*(exp(2*t(x[,i])%*%beta)/(theta*exp(t(x[,i])%*%beta)+exp(t(x[,j])%*%beta))^2)
+(r[i,j]-Y[j,i])*(exp(2*t(x[,j])%*%beta)/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta))^2)
)
}
}
return(sum)
}
db2 <- function(beta,theta,x){
for(i in 1:(dim(x)[2]-1)){
for(j in (i+1):dim(x)[2]) {
sum = 0;
sum = sum + (as.numeric((((-(r[i,j]-Y[i,j])/(theta*exp(t(x[,i])%*%beta)+exp(t(x[,j])%*%beta))^2)
-(r[i,j]-Y[j,i])/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta))^2))
*(exp(t(x[,i])%*%beta+t(x[,j])%*%beta)*theta))*((x[,i]-x[,j])%*%t(x[,i]-x[,j]))
)
}
}
return(sum)
}
dbt <- function(beta,theta,x){
for(i in 1:(dim(x)[2]-1)){
for(j in (i+1):dim(x)[2]) {
sum=0;
sum = sum + ((as.numeric((-(r[i,j]-Y[i,j])/(theta*exp(t(x[,i])%*%beta)+exp(t(x[,j])%*%beta))^2)+
((r[i,j]-Y[j,i])/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta))^2))*
(exp(t(x[,i])%*%beta+t(x[,j])%*%beta))*(x[,i]-x[,j]))
)
}
}
return(sum)
}
Funktions <- list("loglike" = logl,"dlbeta" = db,"dltheta" = dtheta,"dl2xtheta" = dtheta2,"dl2xbeta"= db2,"dlbetatheta" = dbt)
return(Funktions)
}
f <- BTFunktioner(beta,theta,x)
f$dlbetatheta(beta,theta,x)
f$dltheta(beta,theta,x)
library(BTSoccer)
library(BTSoccer)
#Henter og verificerer data
data <- read.table("kampe_r1.csv",header=T,sep=",")
m <- CreateMatrixes(data,"2018-07-15","2019-05-26",0)
library(matlib) #Til vektor/matrix regning
library(blockmatrix) #matrixopsætning
library(tidyr) #Til data transformation
library(BTSoccer)
setwd("C:/Users/lucas/Desktop/Odd")
#Henter og verificerer data
data <- read.table("kampe_r1.csv",header=T,sep=",")
m <- CreateMatrixes(data,"2018-07-15","2019-05-26",0)
x <- m$DesignMatrix;Y <- m$KontingensTabel; r <- m$SamledeKampe;
f <- BTFunktioner(beta,theta,x)
n <- NR(x,f)
ite = as.matrix(c(rep(0.1,dim(x)[1]),1.1));counter=0;val=1;
beta = c(ite[1:(dim(x)[1])]);
theta=ite[dim(x)[1]+1];
a12 = as.matrix(f$dlbeta(beta,theta,x));
grad = rbind(a12,f$dltheta(beta,theta,x));
A = f$dl2xbeta(beta,theta,x);B = as.matrix(f$dlbetatheta(beta,theta,x));C = t(as.matrix(f$dlbetatheta(beta,theta,x)));D = f$dl2xtheta(beta,theta,x);
inf = cbind(A,B);inf = rbind(inf,c(C,D));inf=-inf;
inf
BTFunktioner <- function(beta,theta,x) {
logl <- function(beta,theta,x){
sum=0;
for (i in 1:(dim(x)[2]-1)){
for (j in (i+1):(dim(x)[2])){
sum = sum +Y[i,j]*(t(x[,i])%*%beta-log(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta)))+
Y[j,i]*(t(x[,j])%*%beta-log(exp(t(x[,j])%*%beta)+theta*exp(t(x[,i])%*%beta)))+
(r[i,j]-Y[i,j]-Y[j,i])*(log(theta^2-1)+t(x[,i])%*%beta+t(x[,j])%*%beta-log(exp(t(x[,i])%*%beta)+
theta*exp(t(x[,j])%*%beta))-log(exp(t(x[,j])%*%beta)+theta*exp(t(x[,i])%*%beta)))
}
}
return(sum)
}
db <- function(beta,theta,x){
sum=0;
for(i in 1:(dim(x)[2]-1)){
for(j in (i+1):dim(x)[2]) {
sum = sum + (c(r[i,j]-Y[i,j])*(-(theta*exp(t(x[,i])%*%beta))/(exp(t(x[,j])%*%beta)+theta*exp(t(x[,i])%*%beta)))
+c(r[i,j]-Y[j,i])*((theta*exp(t(x[,j])%*%beta))/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta)))
)*(x[,i]-x[,j])
}
}
return(sum)
}
dtheta <- function(beta,theta,x) {
sum = 0;
for(i in 1:(dim(x)[2]-1)) {
for(j in (i+1):dim(x)[2]) {
sum = sum + ((r[i,j]-Y[i,j]-Y[j,i])*(2*theta/(theta^2-1))
+ (r[i,j]-Y[i,j])*(-(exp(t(x[,i])%*%beta)/(theta*exp(t(x[,i])%*%beta)+exp(t(x[,j])%*%beta))))
+ (r[i,j]-Y[j,i])*(-(exp(t(x[,j])%*%beta)/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta))))
)
}
}
return(sum)
}
dtheta2 <- function(beta,theta,x) {
sum = 0;
for(i in 1:(dim(x)[2]-1)) {
for(j in (i+1):dim(x)[2]) {
sum = sum + ((r[i,j]-Y[i,j]-Y[j,i])*(-(2*(theta^2+1))/(theta^2-1)^2)
+(r[i,j]-Y[i,j])*(exp(2*t(x[,i])%*%beta)/(theta*exp(t(x[,i])%*%beta)+exp(t(x[,j])%*%beta))^2)
+(r[i,j]-Y[j,i])*(exp(2*t(x[,j])%*%beta)/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta))^2)
)
}
}
return(sum)
}
db2 <- function(beta,theta,x){
sum = 0;
for(i in 1:(dim(x)[2]-1)){
for(j in (i+1):dim(x)[2]) {
sum = sum + (as.numeric((((-(r[i,j]-Y[i,j])/(theta*exp(t(x[,i])%*%beta)+exp(t(x[,j])%*%beta))^2)
-(r[i,j]-Y[j,i])/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta))^2))
*(exp(t(x[,i])%*%beta+t(x[,j])%*%beta)*theta))*((x[,i]-x[,j])%*%t(x[,i]-x[,j]))
)
}
}
return(sum)
}
dbt <- function(beta,theta,x){
sum=0;
for(i in 1:(dim(x)[2]-1)){
for(j in (i+1):dim(x)[2]) {
sum = sum + ((as.numeric((-(r[i,j]-Y[i,j])/(theta*exp(t(x[,i])%*%beta)+exp(t(x[,j])%*%beta))^2)+
((r[i,j]-Y[j,i])/(exp(t(x[,i])%*%beta)+theta*exp(t(x[,j])%*%beta))^2))*
(exp(t(x[,i])%*%beta+t(x[,j])%*%beta))*(x[,i]-x[,j]))
)
}
}
return(sum)
}
Funktions <- list("loglike" = logl,"dlbeta" = db,"dltheta" = dtheta,"dl2xtheta" = dtheta2,"dl2xbeta"= db2,"dlbetatheta" = dbt)
return(Funktions)
}
f <- BTFunktioner(beta,theta,x)
ite = as.matrix(c(rep(0.1,dim(x)[1]),1.1));counter=0;val=1;
beta = c(ite[1:(dim(x)[1])]);
theta=ite[dim(x)[1]+1];
a12 = as.matrix(f$dlbeta(beta,theta,x));
grad = rbind(a12,f$dltheta(beta,theta,x));
A = f$dl2xbeta(beta,theta,x);B = as.matrix(f$dlbetatheta(beta,theta,x));C = t(as.matrix(f$dlbetatheta(beta,theta,x)));D = f$dl2xtheta(beta,theta,x);
inf = cbind(A,B);inf = rbind(inf,c(C,D));inf=-inf;
inf
#git add Probabilities.R #git commit -m "Navn på ændring" #git push #git pull
rm(list=ls())
library(matlib) #Til vektor/matrix regning
library(blockmatrix) #matrixopsætning
library(tidyr) #Til data transformation
library(BTSoccer)
setwd("C:/Users/lucas/Desktop/Odd")
#Henter og verificerer data
data <- read.table("kampe_r1.csv",header=T,sep=",")
m <- CreateMatrixes(data,"2018-07-15","2019-05-26",0)
x <- m$DesignMatrix;Y <- m$KontingensTabel; r <- m$SamledeKampe;
f <- BTFunktioner(beta,theta,x)
n <- NR(x,f)
n$beta
n$Styrker
#Henter og verificerer data
data <- read.table("kampe_r1.csv",header=T,sep=",")
m <- CreateMatrixes(data,"2018-07-15","2019-05-26",0)
x <- m$DesignMatrix;Y <- m$KontingensTabel; r <- m$SamledeKampe;
f <- BTFunktioner(beta,theta,x)
#git add Probabilities.R #git commit -m "Navn på ændring" #git push #git pull
rm(list=ls())
library(matlib) #Til vektor/matrix regning
library(tidyr) #Til data transformation
library(blockmatrix) #matrixopsætning
library(BTSoccer)
setwd("C:/Users/lucas/Desktop/Odd")
#Henter og verificerer data
data <- read.table("kampe_r1.csv",header=T,sep=",")
m <- CreateMatrixes(data,"2018-07-15","2019-05-26",0)
x <- m$DesignMatrix;Y <- m$KontingensTabel; r <- m$SamledeKampe;
f <- BTFunktioner(beta,theta,x)
n <- NR(x,f)
n$Styrker
#git add Probabilities.R #git commit -m "Navn på ændring" #git push #git pull
rm(list=ls())
library(matlib) #Til vektor/matrix regning
library(blockmatrix) #matrixopsætning
library(tidyr) #Til data transformation
library(BTSoccer)
setwd("C:/Users/lucas/Desktop/Odd")
#Henter og verificerer data
data <- read.table("kampe_r1.csv",header=T,sep=",")
m <- CreateMatrixes(data,"2018-07-15","2019-05-26",0)
x <- m$DesignMatrix;Y <- m$KontingensTabel; r <- m$SamledeKampe;
f <- BTFunktioner(beta,theta,x)
x
if(-1 < 0 || 10 < 0) {
cat("virker")
}
if(-1 < 0 || 10 > 0) {
cat("virker")
}
if(1 < 0 || 10 > 0) {
cat("virker")
}
NR <- function(x,f) {
ite = as.matrix(c(rep(0.1,dim(x)[1]),1.1));counter=0;val=1;
while(abs(val)>0.0000001){
beta = c(ite[1:(dim(x)[1])]);
theta=ite[dim(x)[1]+1];
a12 = as.matrix(f$dlbeta(beta,theta,x));
grad = rbind(a12,f$dltheta(beta,theta,x));
A = f$dl2xbeta(beta,theta,x);B = as.matrix(f$dlbetatheta(beta,theta,x));C = t(as.matrix(f$dlbetatheta(beta,theta,x)));D = f$dl2xtheta(beta,theta,x);
inf = cbind(A,B);inf = rbind(inf,c(C,D));inf=-inf;
if(D < 0 || A < B%*%inv(D)%*%C){
cat("Ude af betingelsen")
}
temp = ite;
ite = ite + Inverse(inf)%*%grad*(1/2);
val = sum(temp-ite);
f$loglike(beta,theta,x)
counter = counter +1;
}
cat("logl :",f$loglike(beta,theta,x))
styrker <- exp(t(x)%*%beta);names(styrker) <- names(Y)
KV <- inv(inf)
U <- sqrt(diag(KV))
Values = list("beta" = beta, "theta" = theta,"styrker" = styrker,"sd" = U)
return(Values)
}
NR(x,f)
require(matlib) #Til vektor/matrix regning
require(blockmatrix) #matrixopsætning
require(tidyr) #Til data transformation
NR(x,f)
D
ite = as.matrix(c(rep(0.1,dim(x)[1]),1.1));counter=0;val=1;
beta = c(ite[1:(dim(x)[1])]);
theta=ite[dim(x)[1]+1];
a12 = as.matrix(f$dlbeta(beta,theta,x));
grad = rbind(a12,f$dltheta(beta,theta,x));
A = f$dl2xbeta(beta,theta,x);B = as.matrix(f$dlbetatheta(beta,theta,x));C = t(as.matrix(f$dlbetatheta(beta,theta,x)));D = f$dl2xtheta(beta,theta,x);
inf = cbind(A,B);inf = rbind(inf,c(C,D));inf=-inf;
D
A
B%*%inv(D)%*%C
B
inv(D)
D
D^(-1)
B%*%D^(-1)%*%C
A
A
NR <- function(x,f) {
ite = as.matrix(c(rep(0.1,dim(x)[1]),1.1));counter=0;val=1;
while(abs(val)>0.0000001){
beta = c(ite[1:(dim(x)[1])]);
theta=ite[dim(x)[1]+1];
a12 = as.matrix(f$dlbeta(beta,theta,x));
grad = rbind(a12,f$dltheta(beta,theta,x));
A = f$dl2xbeta(beta,theta,x);B = as.matrix(f$dlbetatheta(beta,theta,x));C = t(as.matrix(f$dlbetatheta(beta,theta,x)));D = f$dl2xtheta(beta,theta,x);
inf = cbind(A,B);inf = rbind(inf,c(C,D));inf=-inf;
if(-D < 0 || -A < -B%*%D^(-1)%*%C){
cat("Ude af betingelsen")
}
temp = ite;
ite = ite + Inverse(inf)%*%grad*(1/2);
val = sum(temp-ite);
f$loglike(beta,theta,x)
counter = counter +1;
}
cat("logl :",f$loglike(beta,theta,x))
styrker <- exp(t(x)%*%beta);names(styrker) <- names(Y)
KV <- inv(inf)
U <- sqrt(diag(KV))
Values = list("beta" = beta, "theta" = theta,"styrker" = styrker,"sd" = U)
return(Values)
}
NR(x,f)
NR <- function(x,f,beta,theta) {
ite = as.matrix(c(rep(0.1,dim(x)[1]),1.1));counter=0;val=1;
while(abs(val)>0.0000001){
StepHalv = 1/2;
beta = c(ite[1:(dim(x)[1])]);
theta=ite[dim(x)[1]+1];
a12 = as.matrix(f$dlbeta(beta,theta,x));
grad = rbind(a12,f$dltheta(beta,theta,x));
A = f$dl2xbeta(beta,theta,x);B = as.matrix(f$dlbetatheta(beta,theta,x));C = t(as.matrix(f$dlbetatheta(beta,theta,x)));D = f$dl2xtheta(beta,theta,x);
inf = cbind(A,B);inf = rbind(inf,c(C,D));inf=-inf;
if(-D < 0 || -A < -B%*%D^(-1)%*%C){
StepHalv = -1/4;
}
temp = ite;
ite = ite + Inverse(inf)%*%grad*StepHalv;
val = sum(temp-ite);
f$loglike(beta,theta,x)
counter = counter +1;
}
cat("logl :",f$loglike(beta,theta,x))
styrker <- exp(t(x)%*%beta);names(styrker) <- names(Y)
KV <- inv(inf)
U <- sqrt(diag(KV))
Values = list("beta" = beta, "theta" = theta,"styrker" = styrker,"sd" = U)
return(Values)
}
NR(x,f)
?NR
library(BTSoccer)
library(BTSoccer)
?NR
library(BTSoccer)
?NR
library(BTSoccer)
library(BTSoccer)
?NR
setwd("C:/Users/lucas/Desktop/Odd")
library(matlib) #Til vektor/matrix regning
library(blockmatrix) #matrixopsætning
library(tidyr) #Til data transformation
#Henter og verificerer data
data <- read.table("kampe_r1.csv",header=T,sep=",")
m <- CreateMatrixes(data,"2018-07-15","2019-05-26",0)
x <- m$DesignMatrix;Y <- m$KontingensTabel; r <- m$SamledeKampe;
f <- BTFunktioner(beta,theta,x)
n <- NR(x,f)
length(x)
length(x[,1])
beta = c(rep(0,9))
beta
n <- NR(x,f,beta)
beta
n$beta
missing(beta)
n <- NR(x,f,beta)
library(BTSoccer)
n <- NR(x,f,beta)
library(BTSoccer)
n <- NR(x,f,beta)
